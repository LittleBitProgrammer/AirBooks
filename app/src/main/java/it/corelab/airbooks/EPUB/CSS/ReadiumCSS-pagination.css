/* Readium CSS 
   Pagination module

   A set of styles to paginate ePublications

   Repo: https://github.com/readium/readium-css */

/* 
   Note: implementers feedback greatly appreciated, want to validate this approach before 
   fine-tuning margins, columns, etc. On larger screens, you might want to resize the viewport
   i.e. the web view / iframe so that you still get 2 columns.
   
   Tried to make the most out of the multicol’s logic, which is responsive by default,
   but since columns have a floor but no ceiling, we have to find another way to limit line-length, 
   manage margins, etc.
   
   I wish something like :nth-column(odd | even) existed to manage padding on body more efficitely
   but we’ll have to do without it so having evenly-distributed spacing (left, column gap and right)
   must be implemented in another way if you want that.
*/

/* Config */

/* Columns are responsive by default, even if column-width is set in pixels, 
   which means two-page spread will switch to single page depending on current font-size.
   If you want more control, I’m afraid you’ll have to update colWidth/colGap dynamically, 
   which is how a significant amount of RS do at the moment. */
:root {
  /* Your columns’ width floor */
  --RS__colWidth: 30em;
  /* Ideal number of columns (depending on columns’ width floor) */
  --RS__colCount: 2; /* Can be undefined */
  /* Gap between columns (in pixels so that it won’t resize with font-size) */
  --RS__colGap: 0px;
  /* Default page horizontal margins (in pixels so that it won’t resize with font-size) */
  --RS__pageGutter: 20px; /* See if colGap and pageGutter can be the same var */
  /* Optimal line-length (rem will take :root font-size into account, whatever the body’s font-size) */
  --RS__maxLineLength: 40rem;
}

/* Reset page margins for Forward compatibility */
@page {
  margin: 0 !important;
}

/* :root selector has same specificity as a class i.e. 0010
   We might have to change that to html / context 
   -> https://css-tricks.com/almanac/selectors/r/root/ */
:root {
  /* Prevents options pop-up when long tap in webkit */
  -webkit-touch-callout: none;

  /* Fix bug for older Chrome */
  -webkit-perspective: 1;

  /* Column size will depend on this if we want to make it responsive */
  font-size: 100% !important;

  /* In case you use left position to scroll, can be removed if using transform: translateX() */
  position: relative;

  /* Switch to newer box model (not inherited by authors’ styles) */
  box-sizing: border-box;
  width: 100%;
  height: 100vh;
  margin: 0 !important;
  padding: 0 !important;

  /* Init pagination */
  /* TODO: document columns’ logic cos it might feel weird at first */
  -webkit-column-count: var(--RS__colCount);
  -moz-column-count: var(--RS__colCount);
  column-count: var(--RS__colCount);

  -webkit-column-width: var(--RS__colWidth);
  -moz-column-width: var(--RS__colWidth);
  column-width: var(--RS__colWidth);

  -webkit-column-gap: var(--RS__colGap);
  -moz-column-gap: var(--RS__colGap);
  column-gap: var(--RS__colGap);

  /* Default is balance and we want columns to be filled entirely (100vh) */
  -moz-column-fill: auto;
  column-fill: auto;

  -webkit-text-size-adjust: 100%;

  /* Since columns do their thing at the browser level, 
  provide a variable to check if there is 1 or 2 columns */
  --RS__currentColNumber: 1;
}

body {
/*  overflow: hidden; bugfix: contents won’t paginate in Firefox and one sample in Safari */
  width: 100%;

  /* Limit line-length but we have to reset when 2 columns and control the viewport.
     By using max-width + margin auto, margins will shrink when font-size increases,
     which is what would be expected in terms of typography. */
  /* TODO: some authors might have a max-width declared already, see how we can deal with it. */
  max-width: var(--RS__maxLineLength) !important;
  margin: 0 auto !important;

  /* We need a minimum padding on body so that descandants/ascendants in italic/script are not cut-off.
     It also serves as a margin on small screens.
     Drawback: we have to use border-box so that it doesn’t screw the box model,
     which means it impacts colWidth and max-width */
  box-sizing: border-box;
  padding: 0 var(--RS__pageGutter) !important;
}

/* If viewport can fit 2 columns (+ colGap) */
@media screen and (min-width: 61.5em) {
  :root {
    --RS__maxLineLength: none; /* Reset max-width */
    --RS__colGap: 0px;
    --RS__pageGutter: 50px;
    
    --RS__currentColNumber: 2;
  }
}
